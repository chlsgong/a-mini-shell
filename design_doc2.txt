################
YOUR INFO
################
Name1: Manasa Tipparam
EID1: mt32855
CS login: manasa@cs.utexas.edu 
Email: manasa.tipparam@gmail.com
Unique Number: 51080

Slip days used:

****EACH student submits a (unique) design document.****

################
YOUR PARTNER'S INFO
################
Name1: Manasa Tipparam
EID1: hcg359
CS login: hcgong@cs.utexas.edu
Email: gch_charles@yahoo.com
Unique Number: 51085

Your partner's ranking (scale below):

################
PARTNER EVALUATION SCALE
################
Excellent: Consistently went above and beyond - tutored others, carried
more than his/her fair share of the load.

Very Good: Consistently did what he/she was supposed to do, very well
prepared and cooperative.

Satisfactory: Usually did what he/she was supposed to do, minimally
prepared and cooperative.

Marginal: Sometimes failed to show up and/or rarely prepared.

Deficient: Often failed to show up and/or rarely prepared.

Unsatisfactory: Consistently failed to show up and/or unprepared.

Superficial: Practically no participation.

No Show: No participation at all.

################
Preliminaries
################
(1) If you have any preliminary comments on your submission, notes for
  the TAs, or extra credit, please give them here.

(2) Please cite any offline or online sources you consulted while
  preparing your submission, other than the Linux documentation,
  course text, and lecture notes.


################
Questions regarding Part 0
################
(1) How many child processes are created when doFib() begins with
  an input of 5?  Show the return value for each child process, numbering
  the processes beginning with 0 (the original process) and incrementing for
  each child process.

  14 child processes are created when doFib() begins with an input of 5.
  Return values for each child process:
  #1 3
  #2 2
  #3 2
  #4 1
  #5 1
  #6 1
  #7 1
  #8 1
  #9 1
  #10 1
  #11 1
  #12 0
  #13 0
  #14 0

(2) In part 0.3, which flavor of exec did you choose to use?  Why?

We used execve because we wanted to pass an array of characters (the command line argument) as a parameter instead of a single variable or file.


################
Questions regarding Part 1
################
(1) In the provided utility function Signal(), what does the call to
  sigaction() do?  Why was sigaction() used instead of signal()?

  The call to sigaction allows us to specify custom actions to signals. We used sigaction() instead of signal() because otherwise, it won't restart system calls when interrupted by a signal.

(2) What is the last assembly language instruction executed by the
  signal handler function that you write?  (You may choose either signal
  handler.)
  callq 0x4007a0 <write@plt> for the SIGUSR1 signal

(3) After the instruction identified in the previous question executes, 
  what is the next assembly language instruction executed?
  pushq $0x3

(4) When the signal handler finishes running, it must restore all of
  the registers from the interrupted thread to exactly their values
  before the signal occurred. How is this done?

  A stack frame is created containing the registers before the signal handler is called.When the process executes the signal handler, the stack pointer is set to the new stack frame. This is how it restores all of the registers from the interrupted thread.


################
Questions regarding Part 2
################
(1) In msh.c, we use three separate signal handlers to catch our signals. 
  You can also use a single signal handler to catch all three signals.  Is
  there a design advantage of one over the other?  Explain your answer.

  By having three separate signal handlers, we can avoid having multiple interruptions from multiple signals at the same time. We can also choose which process to send the signal to. Having multiple signal handlers allow us to more easily customize the way we deal with each of the signals. 


