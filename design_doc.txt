################
YOUR INFO
################
Name1: Charles Gong
EID1: hcg359
CS login: hcgong@cs.utexas.edu
Email: gch_charles@yahoo.com
Unique Number: 51085

Slip days used:

****EACH student submits a (unique) design document.****

################
YOUR PARTNER'S INFO
################
Name1: Manasa Tipparam
EID1: mt32855
CS login: manasa@cs.utexas.edu
Email: manasa.tipparam@gmail.com
Unique Number: 51080

Your partner's ranking (scale below): Very Good

################
PARTNER EVALUATION SCALE
################
Excellent: Consistently went above and beyond - tutored others, carried
more than his/her fair share of the load.

Very Good: Consistently did what he/she was supposed to do, very well
prepared and cooperative.

Satisfactory: Usually did what he/she was supposed to do, minimally
prepared and cooperative.

Marginal: Sometimes failed to show up and/or rarely prepared.

Deficient: Often failed to show up and/or rarely prepared.

Unsatisfactory: Consistently failed to show up and/or unprepared.

Superficial: Practically no participation.

No Show: No participation at all.

################
Preliminaries
################
(1) If you have any preliminary comments on your submission, notes for
  the TAs, or extra credit, please give them here.

(2) Please cite any offline or online sources you consulted while
  preparing your submission, other than the Linux documentation,
  course text, and lecture notes.


################
Questions regarding Part 0
################
(1) How many child processes are created when doFib() begins with
  an input of 5?  Show the return value for each child process, numbering
  the processes beginning with 0 (the original process) and incrementing for
  each child process.

  14 child processes are created when doFib() is called with an input of 5.
  0. 5 <- parent
  1. 3
  2. 2
  3. 2
  4. 1
  5. 1
  6. 1
  7. 1
  8. 0
  9. 1
  10. 1
  11. 1
  12. 1
  13. 0
  14. 1
  15. 0

(2) In part 0.3, which flavor of exec did you choose to use?  Why?

  I used the execve() function. This type of exec allows multiple variables to be passed through the program's arguments. It also doesn't define how many variables it must take so it is dynamic. The programs we run through the shell can take multiple arguments or a single argument. We don't know so we use execve().


################
Questions regarding Part 1
################
(1) In the provided utility function Signal(), what does the call to
  sigaction() do?  Why was sigaction() used instead of signal()?

  sigaction() allows the user to define the behavior of a signal(SIGINT, SIGTSTP, etc.). In Signal(), the sigaction call restarts an interrupted system call. This was used instead of signal() because it doesn't include error handling or system call restarts.

(2) What is the last assembly language instruction executed by the
  signal handler function that you write?  (You may choose either signal
  handler.)
  
  callq 0x4007a0 <write@plt> // for the SIGUSR1 signal

(3) After the instruction identified in the previous question executes, 
  what is the next assembly language instruction executed?
  
  pushq $0x3

(4) When the signal handler finishes running, it must restore all of
  the registers from the interrupted thread to exactly their values
  before the signal occurred. How is this done?

  When a signal is caught, a stack frame is created with all the register values pushed onto it. Then the registers are cleared and the instruction pointer moves to the handler. After the handler is returned, the stack frame is harvested, restoring the values back to their respective registers.  


################
Questions regarding Part 2
################
(1) In msh.c, we use three separate signal handlers to catch our signals. 
  You can also use a single signal handler to catch all three signals.  Is
  there a design advantage of one over the other?  Explain your answer.

  Using three seperate signal handlers allows more flexibility to the code. It lets the user send different signals to a particular process. Having multiple signal handlers also avoids the possibility of interruptions during the handling. If we try to catch all the signals in one handler, it is likely that multiple interruptions occur if signals are frequently sent.



